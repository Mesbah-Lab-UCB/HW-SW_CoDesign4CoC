function [c] = initialize_msmpc(casadi_path, use_gp, model_path)
% function to run a closed-loop simulation of the msMPC (call from MATLAB for
% fair comparison). the input arguments to this function are considered to be
% Python types and must be converted to the appropriate MATLAB types first.
%
% params - the params argument parameterizes the closed-loop implementation
%       which currently supports the parameters related to the DNN
%       construction (number of nodes H and number of hidden layers L),
%       parameters related to hardware implementation (option to unroll
%       loops and fixed point word length)
% data_save_file - the data_save_file argument denotes the location of the
%       data for training a DNN (generated by either gathering open-loop or
%       closed-loop data of an MPC system)
%
% Name-Value Pair Arguments:
%

% add relevant function paths
addpath(genpath('./config'), genpath('./utils'),genpath('../Model_ID'))
addpath(casadi_path)

%% load problem data
prob_info = multistage_load_problem_info_exp();

if use_gp
    if train_gp
        % extract data for GP
        model = load(model_path); % 2022 data (n4sid)

        % w_{k} = x_{k+1} - f(x_{k}, u_{k}) = x_{k+1, true} - x_{k+1, pred}
        lag = 1;
        ydata = model.dataInfo.ydata; % system outputs of the identified system (y_{k})
        udata = model.dataInfo.udata; % system inputs of the identified system (u_{k})
        ypred = model.dataInfo.ypred; % predicted outputs of the identified system (y_{k+1})
        x = [ydata(1:end-lag,:) udata(1:end-lag,:)]; % system output is the input to the GP (i.e., the GP predicts state-dependent uncertainty) x_{k}
        y = ypred(lag+1:end,:)-ydata(lag+1:end,:); % output of the GP is the plant-model mismatch (i.e., w_{k} = y_{k,real} - y_{k,pred})

        rng(0)
        n_gp_samp = 1000;
        rand_idx = sort(randi([1, size(ydata,1)-lag], 1, n_gp_samp));

        x_gp = x(rand_idx,:);
        y_gp = y(rand_idx,:);
        gpr = GPR(x_gp, y_gp);
        [gpr, myGP, GP_hyp] = gpr.train_model('kfcn', @(m1,m2,t) GPR.kernel_rbf(m1,m2,t), 'kparams', [1.5;-2]);
    %     [gpr, myGPcas] = gpr.create_casadi_function('gp_model_type', 'matlab');

        if ~isempty(trained_gp_file)
            save(trained_gp_file, 'gpr', 'x', 'y', 'lag', 'x_gp', 'y_gp')
        end
    else
        loaded_gpr = load(trained_gp_file);
        gpr = loaded_gpr.gpr;
        x = loaded_gpr.x;
        y = loaded_gpr.y;
        lag = loaded_gpr.lag;
        x_gp = loaded_gpr.x_gp;
        y_gp = loaded_gpr.y_gp;
    end
  end

%% set up controller
c = AdMultistageMPC(prob_info);
c = c.get_mpc();
[c, res, feas] = c.solve_mpc() % do test run
disp(res.U)
