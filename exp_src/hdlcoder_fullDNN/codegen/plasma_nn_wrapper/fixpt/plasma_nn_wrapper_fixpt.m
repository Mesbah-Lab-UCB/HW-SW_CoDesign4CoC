%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                          %
%          Generated by MATLAB 9.10 and Fixed-Point Designer 7.2           %
%                                                                          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%#codegen
function [y1_1,y1_2] = plasma_nn_wrapper_fixpt(x1_1, x1_2, x1_3)
fm = get_fimath();

x1 = fi([fi(x1_1, 1, 13, 11, fm); x1_2; x1_3], 1, 13, 11, fm);
y1 = fi(plasma_nn(x1), 1, 13, 13, fm);
y1_1 = fi(y1(1), 1, 13, 11, fm);
y1_2 = fi(y1(2), 1, 13, 11, fm);
end

function [y1] = plasma_nn(x1)
%PLASMA_NN neural network simulation function.
%
% Auto-generated by MATLAB, 27-Aug-2022 06:45:03.
% 
% [y1] = plasma_nn(x1) takes these arguments:
%   x = 3xQ matrix, input #1
% and returns:
%   y = 2xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
fm = get_fimath();

x1_step1.xoffset = fi([-1;-1;-1], 1, 2, 0, fm);
x1_step1.gain = fi([1;1;1], 0, 1, 0, fm);
x1_step1.ymin = fi(-1, 1, 2, 0, fm);

% Layer 1
b1 = fi([0.80831931814668234182;-0.14695061016227484174;0.066291221258295743302], 1, 13, 12, fm);
IW1_1 = fi([0.49902993150899227492 -0.51296840185120362587 -0.20278058006334570562;0.30123670628984067221 0.68814909306292171287 -0.012676887330512975893;0.12516802593384807052 0.93273495397189420952 -0.53291115347939677083], 1, 13, 11, fm);

% Layer 2
b2 = fi([-0.93237153366645220132;0.31764178540904275394;0.06429245746966102959], 1, 13, 11, fm);
LW2_1 = fi([-0.87688876060151987879 -0.41598287445587622813 -0.8289385126705468565;-0.97592909102828584444 0.81204539723765600812 0.36119144972618322242;-0.42784037693397464208 -0.39408658145026898012 -0.34331363106923984407], 1, 13, 11, fm);

% Layer 3
b3 = fi([-0.69411239089475951225;0.075852120666890815448;-0.32220275539283171895], 1, 13, 12, fm);
LW3_2 = fi([0.68310892499344122442 0.59640738468320253496 -0.066870905616785103476;-0.89138363088825300906 -0.691080406954987847 -0.93983815940534676248;-0.4651859341382531543 -0.15627377539294085018 -0.2769500171822780743], 1, 13, 11, fm);

% Layer 4
b4 = fi([-0.95725927982871428235;0.72199148382061495433;0.10789315145848196731], 1, 13, 11, fm);
LW4_3 = fi([0.13686895098509510582 -0.34659893472624792032 -0.27628215335070005487;0.14953500000556085858 -0.21976798459184171408 0.043059695577947421086;0.98286403196010230232 0.41177204033841952047 0.86464350458194472182], 1, 13, 11, fm);

% Layer 5
b5 = fi([-0.8986549269428742992;-0.96981738542255646607;-0.76552307618084380891], 1, 13, 11, fm);
LW5_4 = fi([-0.048011828460824412801 0.51326664840066071882 -0.94384279362342304864;-0.26031264445228585735 -0.28972775702039910151 0.83945422718018547492;0.71983166579664503715 0.66735876398802407294 0.41119555922502265544], 1, 13, 11, fm);

% Layer 6
b6 = fi([-0.26583101460228997226;-0.27196532804561301955], 1, 13, 13, fm);
LW6_5 = fi([0.26657965612375722486 0.94406392829578678061 0.42868402720802761818;0.28736193113682428901 -0.87078421100392522369 -0.82590948979324840806], 1, 13, 11, fm);

% Output 1
y1_step1.ymin = fi(-1, 1, 2, 0, fm);
y1_step1.gain = fi([1;1], 0, 1, 0, fm);
y1_step1.xoffset = fi([-1;-1], 1, 2, 0, fm);

% ===== SIMULATION ========

% Dimensions
Q = fi(size(x1,fi(2, 0, 2, 0, fm)), 0, 1, 0, fm); % samples

% Input 1
xp1 = fi(mapminmax_apply(x1,x1_step1), 1, 13, 11, fm);

% Layer 1
a1 = fi(poslin_apply(repmat(b1,1,fi_toint(Q)) + IW1_1*xp1), 0, 13, 12, fm);

% Layer 2
a2 = fi(poslin_apply(repmat(b2,1,fi_toint(Q)) + LW2_1*a1), 0, 1, 0, fm);

% Layer 3
a3 = fi(poslin_apply(repmat(b3,1,fi_toint(Q)) + LW3_2*a2), 0, 13, 16, fm);

% Layer 4
a4 = fi(poslin_apply(repmat(b4,1,fi_toint(Q)) + LW4_3*a3), 0, 13, 13, fm);

% Layer 5
a5 = fi(poslin_apply(repmat(b5,1,fi_toint(Q)) + LW5_4*a4), 0, 1, 0, fm);

% Layer 6
a6 = fi(repmat(b6,1,fi_toint(Q)) + LW6_5*a5, 1, 13, 13, fm);

% Output 1
y1 = fi(mapminmax_reverse(a6,y1_step1), 1, 13, 13, fm);
end

% ===== MODULE FUNCTIONS ========
% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  fm = get_fimath();

  y = fi(bsxfun(@minus,x,settings.xoffset), 1, 13, 11, fm);
  y(:) = bsxfun(@times,y,settings.gain);
  y(:) = bsxfun(@plus,y,settings.ymin);
end

% Linear Positive Transfer Function
function a = poslin_apply(n,~)
  fm = get_fimath();

  a = fi(max(fi(0, 0, 1, 0, fm),n), 0, 13, 12, fm);
  a(isnan(n)) = nan;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  fm = get_fimath();

  x = fi(bsxfun(@minus,y,settings.ymin), 1, 13, 12, fm);
  x(:) = bsxfun(@rdivide,x,settings.gain);
  x(:) = bsxfun(@plus,x,settings.xoffset);
end



function y = fi_toint(u)
    coder.inline( 'always' );
    if isfi( u )
        nt = numerictype( u );
        s = nt.SignednessBool;
        wl = nt.WordLength;
        y = int32( fi( u, s, wl, 0, hdlfimath ) );
    else
        y = int32( u );
    end
end

function fm = get_fimath()
	fm = fimath('RoundingMethod', 'Floor',...
	     'OverflowAction', 'Wrap',...
	     'ProductMode','FullPrecision',...
	     'MaxProductWordLength', 128,...
	     'SumMode','FullPrecision',...
	     'MaxSumWordLength', 128);
end
