function [y1] = plasma_nn(x1)
%PLASMA_NN neural network simulation function.
%
% Auto-generated by MATLAB, 27-Aug-2022 06:45:03.
% 
% [y1] = plasma_nn(x1) takes these arguments:
%   x = 3xQ matrix, input #1
% and returns:
%   y = 2xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-1;-1;-1];
x1_step1.gain = [1;1;1];
x1_step1.ymin = -1;

% Layer 1
b1 = [0.80831931814668234182;-0.14695061016227484174;0.066291221258295743302];
IW1_1 = [0.49902993150899227492 -0.51296840185120362587 -0.20278058006334570562;0.30123670628984067221 0.68814909306292171287 -0.012676887330512975893;0.12516802593384807052 0.93273495397189420952 -0.53291115347939677083];

% Layer 2
b2 = [-0.93237153366645220132;0.31764178540904275394;0.06429245746966102959];
LW2_1 = [-0.87688876060151987879 -0.41598287445587622813 -0.8289385126705468565;-0.97592909102828584444 0.81204539723765600812 0.36119144972618322242;-0.42784037693397464208 -0.39408658145026898012 -0.34331363106923984407];

% Layer 3
b3 = [-0.69411239089475951225;0.075852120666890815448;-0.32220275539283171895];
LW3_2 = [0.68310892499344122442 0.59640738468320253496 -0.066870905616785103476;-0.89138363088825300906 -0.691080406954987847 -0.93983815940534676248;-0.4651859341382531543 -0.15627377539294085018 -0.2769500171822780743];

% Layer 4
b4 = [-0.95725927982871428235;0.72199148382061495433;0.10789315145848196731];
LW4_3 = [0.13686895098509510582 -0.34659893472624792032 -0.27628215335070005487;0.14953500000556085858 -0.21976798459184171408 0.043059695577947421086;0.98286403196010230232 0.41177204033841952047 0.86464350458194472182];

% Layer 5
b5 = [-0.8986549269428742992;-0.96981738542255646607;-0.76552307618084380891];
LW5_4 = [-0.048011828460824412801 0.51326664840066071882 -0.94384279362342304864;-0.26031264445228585735 -0.28972775702039910151 0.83945422718018547492;0.71983166579664503715 0.66735876398802407294 0.41119555922502265544];

% Layer 6
b6 = [-0.26583101460228997226;-0.27196532804561301955];
LW6_5 = [0.26657965612375722486 0.94406392829578678061 0.42868402720802761818;0.28736193113682428901 -0.87078421100392522369 -0.82590948979324840806];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1];
y1_step1.xoffset = [-1;-1];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = poslin_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = poslin_apply(repmat(b2,1,Q) + LW2_1*a1);

% Layer 3
a3 = poslin_apply(repmat(b3,1,Q) + LW3_2*a2);

% Layer 4
a4 = poslin_apply(repmat(b4,1,Q) + LW4_3*a3);

% Layer 5
a5 = poslin_apply(repmat(b5,1,Q) + LW5_4*a4);

% Layer 6
a6 = repmat(b6,1,Q) + LW6_5*a5;

% Output 1
y1 = mapminmax_reverse(a6,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Linear Positive Transfer Function
function a = poslin_apply(n,~)
  a = max(0,n);
  a(isnan(n)) = nan;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
