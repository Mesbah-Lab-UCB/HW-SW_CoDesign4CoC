function [y1] = plasma_nn(x1)
%PLASMA_NN neural network simulation function.
%
% Auto-generated by MATLAB, 22-Jul-2022 12:35:55.
% 
% [y1] = plasma_nn(x1) takes these arguments:
%   x = 3xQ matrix, input #1
% and returns:
%   y = 2xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-1;-1;-1];
x1_step1.gain = [1;1;1];
x1_step1.ymin = -1;

% Layer 1
b1 = [0.39633562455995330343;-0.2361881716426644795;0.67310482380820479964;0.35112746088061697058;-0.48320429984318996608];
IW1_1 = [0.64400781058621991981 0.61756494626682290061 0.35100470549960516298;0.43603073209617249084 -0.93400976376588262795 0.38896233178031575095;-0.026190181615690338868 -0.73984878074607440812 -0.26672499123092890949;0.30522392207759596605 -0.69360928165849278226 0.98715989864177233759;-0.98564815867571642372 -0.25964675275836635038 -1.1057836019890696644];

% Layer 2
b2 = [0.81955993802359250466;-0.95610050587704320524;0.47354004972679925034;-0.37921475005292804017;0.97949447319670390755];
LW2_1 = [-0.017962109799439782143 -0.39844815311163139793 -0.798495085291909934 0.56441572682308349673 0.51247465822302706862;-0.10882759857820101246 0.34292679596535324826 0.49200351847495166213 -0.42744776203032053274 0.30148127063314467122;0.48479067890931420992 0.31019600794768131813 0.073034737787085052263 0.23970424527648304114 -1.0341338765154974855;0.20680460842085374162 -0.67477652961073886217 0.18581764699872577173 0.32957380370670719127 -0.70141198888188505123;0.48756911824274795642 -0.76200463688324671097 -0.95754894272878865458 0.4277213710538321223 -0.6227272625375079862];

% Layer 3
b3 = [0.13229742590801846225;0.16959412606720647432];
LW3_2 = [0.49301739495841750971 -0.10465774483074956336 -0.72202370650617009318 0.40215534654117129909 -0.25726421179986824761;-0.64485376368733837715 0.21928374773345349347 -0.36122923291356551223 0.10563009935043204957 0.78632871215294708467];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1];
y1_step1.xoffset = [-1;-1];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = poslin_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = poslin_apply(repmat(b2,1,Q) + LW2_1*a1);

% Layer 3
a3 = repmat(b3,1,Q) + LW3_2*a2;

% Output 1
y1 = mapminmax_reverse(a3,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Linear Positive Transfer Function
function a = poslin_apply(n,~)
  a = max(0,n);
  a(isnan(n)) = nan;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
