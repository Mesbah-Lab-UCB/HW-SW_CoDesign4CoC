%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                          %
%          Generated by MATLAB 9.10 and Fixed-Point Designer 7.2           %
%                                                                          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%#codegen
function [y1_1,y1_2] = plasma_nn_wrapper_fixpt(x1_1, x1_2, x1_3)
fm = get_fimath();

x1 = fi([fi(x1_1, 1, 20, 18, fm); x1_2; x1_3], 1, 20, 18, fm);
y1 = fi(plasma_nn(x1), 1, 20, 20, fm);
y1_1 = fi(y1(1), 1, 20, 18, fm);
y1_2 = fi(y1(2), 1, 20, 18, fm);
end

function [y1] = plasma_nn(x1)
%PLASMA_NN neural network simulation function.
%
% Auto-generated by MATLAB, 22-Jul-2022 13:18:24.
% 
% [y1] = plasma_nn(x1) takes these arguments:
%   x = 3xQ matrix, input #1
% and returns:
%   y = 2xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
fm = get_fimath();

x1_step1.xoffset = fi([-1;-1;-1], 1, 2, 0, fm);
x1_step1.gain = fi([1;1;1], 0, 1, 0, fm);
x1_step1.ymin = fi(-1, 1, 2, 0, fm);

% Layer 1
b1 = fi([0.39393848012732307629;0.1649137533972008518;-0.72275111434264172061;-0.70141198888188505123;-0.48498349175252708498], 1, 20, 19, fm);
IW1_1 = fi([-0.10089451284149542065 0.2046510353128837556 -1.3318899707534908039;0.77845023941596558359 1.1173269617514998142 0.39093432531657418272;0.31019600794768131813 -0.31922854666773359256 0.011914103330284753213;-0.67477652961073886217 0.17053550195955469171 0.39815344531337193423;-0.76200463688324671097 -0.55237612101772604056 0.78180650507159699103], 1, 20, 18, fm);

% Layer 2
b2 = fi([-0.85899846845137095563;0.13764732174438543133;-0.90337699595987042134;-0.97619586099751720631;-0.1927375201586165876], 1, 20, 18, fm);
LW2_1 = fi([0.42342632114568806712 -0.029918699505203288913 -0.29668098587400648647 -0.42832196235925290573 -0.84829142087387277016;-0.4914356420569379047 -0.60680949913758364112 0.66165725579258172218 0.51440045822144253584 -0.89209976266678570056;0.84085140862897644887 -0.66495797614160478961 0.17052818230544852796 0.50745818855699065253 0.061595106017945377985;-0.51295006255002140172 0.23208935229327831706 0.099447216582279063246 -0.23910830604928667853 0.55833446020402233145;0.20884932489082030926 0.029672796172358753553 0.83438732765962009275 0.1356432814504422435 0.86802136845836597168], 1, 20, 19, fm);

% Layer 3
b3 = fi([1.092444712879802049;-0.83112830897817935316;-0.20043470180220701593;-0.71001395610980155837;0.35715257553868984264], 1, 20, 18, fm);
LW3_2 = fi([-0.52367907721706652424 0.20396388280327304443 -1.3023337187270795923 0.65163395497909482046 -0.95131833073774585419;0.58856908136781393992 -0.47405743091971142 -0.83235724400613486651 0.076684870520114190029 0.92379616171010736636;-0.37756991591039024136 0.30815819695356450048 -0.54204606256636234107 0.99226943325377092719 -0.99073155173186511213;-0.013817838019140937789 0.37842900628001552299 0.61471473647067442769 -0.84364894249363264755 0.39502130211619151945;-0.58908833610506283751 0.49630318564741893184 -0.72119503775562654457 -0.11464346044910733724 -0.12804388865696134103], 1, 20, 18, fm);

% Layer 4
b4 = fi([0.72151517999534897641;-0.52250681781897734268], 1, 20, 19, fm);
LW4_3 = fi([-1.00278166177606054 -0.63630594339429502604 -0.70892203923056595904 0.56471696643855617825 -1.1156682672489450781;1.2741522138837628741 -0.47239416695601987861 -0.72786288258267251017 0.031473201734996777978 -0.97652627859134022437], 1, 20, 18, fm);

% Output 1
y1_step1.ymin = fi(-1, 1, 2, 0, fm);
y1_step1.gain = fi([1;1], 0, 1, 0, fm);
y1_step1.xoffset = fi([-1;-1], 1, 2, 0, fm);

% ===== SIMULATION ========

% Dimensions
Q = fi(size(x1,fi(2, 0, 2, 0, fm)), 0, 1, 0, fm); % samples

% Input 1
xp1 = fi(mapminmax_apply(x1,x1_step1), 1, 20, 18, fm);

% Layer 1
a1 = fi(poslin_apply(repmat(b1,1,fi_toint(Q)) + IW1_1*xp1), 0, 20, 19, fm);

% Layer 2
a2 = fi(poslin_apply(repmat(b2,1,fi_toint(Q)) + LW2_1*a1), 0, 20, 20, fm);

% Layer 3
a3 = fi(poslin_apply(repmat(b3,1,fi_toint(Q)) + LW3_2*a2), 0, 20, 21, fm);

% Layer 4
a4 = fi(repmat(b4,1,fi_toint(Q)) + LW4_3*a3, 1, 20, 20, fm);

% Output 1
y1 = fi(mapminmax_reverse(a4,y1_step1), 1, 20, 20, fm);
end

% ===== MODULE FUNCTIONS ========
% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  fm = get_fimath();

  y = fi(bsxfun(@minus,x,settings.xoffset), 1, 20, 18, fm);
  y(:) = bsxfun(@times,y,settings.gain);
  y(:) = bsxfun(@plus,y,settings.ymin);
end

% Linear Positive Transfer Function
function a = poslin_apply(n,~)
  fm = get_fimath();

  a = fi(max(fi(0, 0, 1, 0, fm),n), 0, 20, 19, fm);
  a(isnan(n)) = nan;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  fm = get_fimath();

  x = fi(bsxfun(@minus,y,settings.ymin), 1, 20, 18, fm);
  x(:) = bsxfun(@rdivide,x,settings.gain);
  x(:) = bsxfun(@plus,x,settings.xoffset);
end



function y = fi_toint(u)
    coder.inline( 'always' );
    if isfi( u )
        nt = numerictype( u );
        s = nt.SignednessBool;
        wl = nt.WordLength;
        y = int32( fi( u, s, wl, 0, hdlfimath ) );
    else
        y = int32( u );
    end
end

function fm = get_fimath()
	fm = fimath('RoundingMethod', 'Floor',...
	     'OverflowAction', 'Wrap',...
	     'ProductMode','FullPrecision',...
	     'MaxProductWordLength', 128,...
	     'SumMode','FullPrecision',...
	     'MaxSumWordLength', 128);
end
