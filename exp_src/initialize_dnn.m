function [dnn] = initialize_dnn(casadi_path, dnn_save_file,params)
% function to run a closed-loop simulation of the msMPC (call from MATLAB for
% fair comparison). the input arguments to this function are considered to be
% Python types and must be converted to the appropriate MATLAB types first.
%
% params - the params argument parameterizes the closed-loop implementation
%       which currently supports the parameters related to the DNN
%       construction (number of nodes H and number of hidden layers L),
%       parameters related to hardware implementation (option to unroll
%       loops and fixed point word length)
% data_save_file - the data_save_file argument denotes the location of the
%       data for training a DNN (generated by either gathering open-loop or
%       closed-loop data of an MPC system)
%
% Name-Value Pair Arguments:
%

params = struct(params)
H = double(params.H)
L = double(params.L)

% add relevant function paths
addpath(genpath('./config'), genpath('./utils'),genpath('../Model_ID'))
addpath(casadi_path)

%% load problem data
prob_info = multistage_load_problem_info_exp();

%% set up controller
c = AdMultistageMPC(prob_info);
c = c.get_mpc();
[c, res, feas] = c.solve_mpc(); % do test run
disp(res.U)

%% initialize and train DNN
dnn = DNN();
if isempty(dnn_save_file)
  dnn = dnn.collect_training_data_closed_loop(c, 750, 240);
  inputs = dnn.inputs;
  outputs = dnn.outputs;
  input_min = dnn.input_min;
  input_max = dnn.input_max;
  output_min = dnn.output_min;
  output_max = dnn.output_max;
  save('./saved/dnn_trn_data_750samp_otf.mat', ...
      'inputs', 'outputs', ...
      'input_min', 'input_max', ...
      'output_min', 'output_max') % save NN data
else
  dnn = dnn.set_data(dnn_save_file);
end

disp('Building Neural Network...')
dnn = dnn.build_neural_network(H,L,'relu');
disp('Training Neural Network...')
dnn = dnn.train_neural_network();

dnn = dnn.create_casadi_function(true);
disp(full(dnn.netca([prob_info.x0;0.0])))
disp(dnn.inputs(:,1))
disp(dnn.outputs(:,1))
disp(dnn.net(dnn.inputs(:,1)))
